//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using NHibernate template.
// Code is generated on: 2014-05-16 오후 2:23:13
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using NHibernate.Classic;
using System.Runtime.Serialization;

namespace HubCrawl.Data
{

    /// <summary>
    /// There are no comments for HubCrawl.Data.App, HubCrawl.Data in the schema.
    /// </summary>
    [DataContract(IsReference = true)]
    public partial class App : INotifyPropertyChanging, INotifyPropertyChanged, IValidatable, ICloneable {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private System.Guid _AppID;

        private string _Title;

        private int _Version;
    
        #region Extensibility Method Definitions
        
        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          App toCompare = obj as App;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.AppID, toCompare.AppID))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + AppID.GetHashCode();
          return hashCode;
        }
        /// <summary>
        /// There are no comments for OnAppIDChanging in the schema.
        /// </summary>
        partial void OnAppIDChanging(System.Guid value);
        
        /// <summary>
        /// There are no comments for OnAppIDChanged in the schema.
        /// </summary>
        partial void OnAppIDChanged();
        /// <summary>
        /// There are no comments for OnTitleChanging in the schema.
        /// </summary>
        partial void OnTitleChanging(string value);
        
        /// <summary>
        /// There are no comments for OnTitleChanged in the schema.
        /// </summary>
        partial void OnTitleChanged();
        /// <summary>
        /// There are no comments for OnVersionChanging in the schema.
        /// </summary>
        partial void OnVersionChanging(int value);
        
        /// <summary>
        /// There are no comments for OnVersionChanged in the schema.
        /// </summary>
        partial void OnVersionChanged();
        
        #endregion
        /// <summary>
        /// There are no comments for App constructor in the schema.
        /// </summary>
        public App()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AppID in the schema.
        /// </summary>
        [DataMember(Order=1)]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual System.Guid AppID
        {
            get
            {
                return this._AppID;
            }
            set
            {
                if (this._AppID != value)
                {
                    this.OnAppIDChanging(value);
                    this.SendPropertyChanging();
                    this._AppID = value;
                    this.SendPropertyChanged("AppID");
                    this.OnAppIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [DataMember(Order=2)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Version in the schema.
        /// </summary>
        [DataMember(Order=3)]
        [System.ComponentModel.DataAnnotations.Required()]
        public virtual int Version
        {
            get
            {
                return this._Version;
            }
            set
            {
                if (this._Version != value)
                {
                    this.OnVersionChanging(value);
                    this.SendPropertyChanging();
                    this._Version = value;
                    this.SendPropertyChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
    
        #region IValidatable Members

        public virtual void Validate()
        {
            OnValidate();
        }

        partial void OnValidate();

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            App obj = new App();
            obj.AppID = AppID;
            obj.Title = Title;
            obj.Version = Version;
            return obj;
        }

        #endregion
   
        public virtual event PropertyChangingEventHandler PropertyChanging;

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
